// Des.cpp: implementation of the CDes class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "Des.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif
//////////////////////////////////////////////////////////////////////////
//////////////////////////// Change 4 chars 

#define c2l(c,l)    (l=((unsigned long)(*((c)++))),\
                     l=(l<<8)|((unsigned long)(*((c)++))),\
                     l=(l<<8)|((unsigned long)(*((c)++))),\
               l=(l<<8)|((unsigned long)(*((c)++))))



///////////////////// Change unsigned long integer to 4 chars



#define l2c(l,c)     (*((c)++)=(unsigned char)(((l)>>24)&0xff),\
                      *((c)++)=(unsigned char)(((l)>>16)&0xff),\
                      *((c)++)=(unsigned char)(((l)>>8)&0xff),\
                    *((c)++)=(unsigned char)(((l))&0xff))

#define OP_TWO(x,y,temp,n,m)    ((temp)=((((x)>>(n))^(y))&(m)),(y)^=(temp),(x)^=((temp)<<(n)))

#define OP_ONE(a,temp,n,m)((temp)=((((a)<<(n))^(a))&(m)),\
          (a)^=((temp)|(temp>>(n))))

static const int left_shift[16]={0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0};


/*
**初始化原始数据
*/
#define IP(l,r) \
{\
		   register unsigned long t; \
		   OP_TWO(l,r,t,4,0x0f0f0f0fL); \
		   OP_TWO(l,r,t,16,0x0000ffffL); \
		   OP_TWO(r,l,t,2,0x33333333L); \
		   OP_TWO(r,l,t,8,0x00ff00ffL); \
		   OP_TWO(l,r,t,1,0x55555555L); \
}


/*
**ip逆函数
*/


#define FP(l,r)\
{\
          register unsigned long t;\
           OP_TWO(l,r,t,1,0x55555555L);\
           OP_TWO(r,l,t,8,0x00ff00ffL);\
           OP_TWO(r,l,t,2,0x33333333L);\
           OP_TWO(l,r,t,16,0x0000ffffL);\
           OP_TWO(l,r,t,4,0x0f0f0f0fL);\
}


#define ENCRYPT_R(L,R,temp1,temp2,subkeys,key_index)\
       temp1=((R>>3)|(R<<29))^subkeys[key_index]; \
       temp2=((R<<1)|(R>>31))^subkeys[key_index+1];\
       L^=   S_P[1][(temp2>>24)&0x3f]|\
             S_P[3][(temp2>>16)&0x3f]|\
             S_P[5][(temp2>>8)&0x3f]|\
             S_P[7][(temp2  )&0x3f]|\
             S_P[0][(temp1>>24)&0x3f]|\
             S_P[2][(temp1>>16)&0x3f]|\
             S_P[4][(temp1>>8)&0x3f]|\
             S_P[6][(temp1  )&0x3f];
/*
** s盒与p盒
*/

static const unsigned long S_P[8][64]={
{
/*s_box & P perm 0
0x00000000L, 0x00000002L, 0x00000200L, 0x00000202L,
0x00008000L, 0x00008002L, 0x00008200L, 0x00008202L,
0x00800000L, 0x00800002L, 0x00800200L, 0x00800202L,
0x00808000L, 0x00808002L, 0x00808200L, 0x00808202L,
*/
0x00808200L, 0x00000000L, 0x00008000L, 0x00808202L,
0x00808002L, 0x00008202L, 0x00000002L, 0x00008000L,
0x00000200L, 0x00808200L, 0x00808202L, 0x00000200L,
0x00800202L, 0x00808002L, 0x00800000L, 0x00000002L,
0x00000202L, 0x00800200L, 0x00800200L, 0x00008200L,
0x00008200L, 0x00808000L, 0x00808000L, 0x00800202L,
0x00008002L, 0x00800002L, 0x00800002L, 0x00008002L,
0x00000000L, 0x00000202L, 0x00008202L, 0x00800000L,
0x00008000L, 0x00808202L, 0x00000002L, 0x00808000L,
0x00808200L, 0x00800000L, 0x00800000L, 0x00000200L,
0x00808002L, 0x00008000L, 0x00008200L, 0x00800002L,
0x00000200L, 0x00000002L, 0x00800202L, 0x00008202L,
0x00808202L, 0x00008002L, 0x00808000L, 0x00800202L,
0x00800002L, 0x00000202L, 0x00008202L, 0x00808200L,
0x00000202L, 0x00800200L, 0x00800200L, 0x00000000L,
0x00008002L, 0x00008200L, 0x00000000L, 0x00808002L,
},{


/* s_box & P perm 1
0x00000000L, 0x00004000L, 0x40000000L, 0x40004000L,
0x00000010L, 0x00004010L, 0x40000010L, 0x40004010L,
0x00080000L, 0x00084000L, 0x40080000L, 0x40084000L,
0x00080010L, 0x00084010L, 0x40080010L, 0x40084010L,
*/
0x40084010L, 0x40004000L, 0x00004000L, 0x00084010L,
0x00080000L, 0x00000010L, 0x40080010L, 0x40004010L,
0x40000010L, 0x40084010L, 0x40084000L, 0x40000000L,
0x40004000L, 0x00080000L, 0x00000010L, 0x40080010L,
0x00084000L, 0x00080010L, 0x40004010L, 0x00000000L,
0x40000000L, 0x00004000L, 0x00084010L, 0x40080000L,
0x00080010L, 0x40000010L, 0x00000000L, 0x00084000L,
0x00004010L, 0x40084000L, 0x40080000L, 0x00004010L,
0x00000000L, 0x00084010L, 0x40080010L, 0x00080000L, 
0x40004010L, 0x40080000L, 0x40084000L, 0x00004000L,
0x40080000L, 0x40004000L, 0x00000010L, 0x40084010L,
0x00084010L, 0x00000010L, 0x00004000L, 0x40000000L, 
0x00004010L, 0x40084000L, 0x00080000L, 0x40000010L,
0x00080010L, 0x40004010L, 0x40000010L, 0x00080010L,
0x00084000L, 0x00000000L, 0x40004000L, 0x00004010L,
0x40000000L, 0x40080010L, 0x40084010L, 0x00084000L,
},{

/* s_box & P perm 2
0x00000000L, 0x04000000L, 0x00000004L, 0x04000004L,
0x00010000L, 0x04010000L, 0x00010004L, 0x04010004L,
0x00000100L, 0x04000100L, 0x00000104L, 0x04000104L,
0x00010100L, 0x04010100L, 0x00010104L, 0x04010104L,
*/
0x00000104L, 0x04010100L, 0x00000000L, 0x04010004L,
0x04000100L, 0x00000000L, 0x00010104L, 0x04000100L,
0x00010004L, 0x04000004L, 0x04000004L, 0x00010000L,
0x04010104L, 0x00010004L, 0x04010000L, 0x00000104L,
0x04000000L, 0x00000004L, 0x04010100L, 0x00000100L,
0x00010100L, 0x04010000L, 0x04010004L, 0x00010104L,
0x04000104L, 0x00010100L, 0x00010000L, 0x04000104L, 
0x00000004L, 0x04010104L, 0x00000100L, 0x04000000L,
0x04010100L, 0x04000000L, 0x00010004L, 0x00000104L,
0x00010000L, 0x04010100L, 0x04000100L, 0x00000000L,
0x00000100L, 0x00010004L, 0x04010104L, 0x04000100L,
0x04000004L, 0x00000100L, 0x00000000L, 0x04010004L, 
0x04000104L, 0x00010000L, 0x04000000L, 0x04010004L,
0x00000004L, 0x00010104L, 0x00010100L, 0x04000004L,
0x04010000L, 0x04000104L, 0x00000104L, 0x04010000L,
0x00010104L, 0x00000004L, 0x04010004L, 0x00010100L,
},{


/* s_box & P perm 3
0x00000000L, 0x80000000L, 0x00400000L, 0x80400000L,
0x00001000L, 0x80001000L, 0x00401000L, 0x80401000L,
0x00000040L, 0x80000040L, 0x00400040L, 0x80400040L,
0x00001040L, 0x80001040L, 0x00401040L, 0x80401040L,
*/
0x80401000L, 0x80001040L, 0x80001040L, 0x00000040L,
0x00401040L, 0x80400040L, 0x80400000L, 0x80001000L,
0x00000000L, 0x00401000L, 0x00401000L, 0x80401040L,
0x80000040L, 0x00000000L, 0x00400040L, 0x80400000L,
0x80000000L, 0x00001000L, 0x00400000L, 0x80401000L,
0x00000040L, 0x00400000L, 0x80001000L, 0x00001040L,
0x80400040L, 0x80000000L, 0x00001040L, 0x00400040L,
0x00001000L, 0x00401040L, 0x80401040L, 0x80000040L,
0x00400040L, 0x80400000L, 0x00401000L, 0x80401040L,
0x80000040L, 0x00000000L, 0x00000000L, 0x00401000L,
0x00001040L, 0x00400040L, 0x80400040L, 0x80000000L,
0x80401000L, 0x80001040L, 0x80001040L, 0x00000040L,
0x80401040L, 0x80000040L, 0x80000000L, 0x00001000L,
0x80400000L, 0x80001000L, 0x00401040L, 0x80400040L,
0x80001000L, 0x00001040L, 0x00400000L, 0x80401000L,
0x00000040L, 0x00400000L, 0x00001000L, 0x00401040L,
},{



/* s_box & P perm 4
0x00000000L, 0x20000000L, 0x00000080L, 0x20000080L,
0x00040000L, 0x20040000L, 0x00040080L, 0x20040080L,
0x01000000L, 0x21000000L, 0x01000080L, 0x21000080L,
0x01040000L, 0x21040000L, 0x01040080L, 0x21040080L,
*/
0x00000080L, 0x01040080L, 0x01040000L, 0x21000080L,
0x00040000L, 0x00000080L, 0x20000000L, 0x01040000L,
0x20040080L, 0x00040000L, 0x01000080L, 0x20040080L,
0x21000080L, 0x21040000L, 0x00040080L, 0x20000000L,
0x01000000L, 0x20040000L, 0x20040000L, 0x00000000L,
0x20000080L, 0x21040080L, 0x21040080L, 0x01000080L,
0x21040000L, 0x20000080L, 0x00000000L, 0x21000000L,
0x01040080L, 0x01000000L, 0x21000000L, 0x00040080L,
0x00040000L, 0x21000080L, 0x00000080L, 0x01000000L,
0x20000000L, 0x01040000L, 0x21000080L, 0x20040080L,
0x01000080L, 0x20000000L, 0x21040000L, 0x01040080L,
0x20040080L, 0x00000080L, 0x01000000L, 0x21040000L,
0x21040080L, 0x00040080L, 0x21000000L, 0x21040080L,
0x01040000L, 0x00000000L, 0x20040000L, 0x21000000L,
0x00040080L, 0x01000080L, 0x20000080L, 0x00040000L,
0x00000000L, 0x20040000L, 0x01040080L, 0x20000080L,
},{

/* s_box & P perm 5
0x00000000L, 0x00002000L, 0x00200000L, 0x00202000L,
0x00000008L, 0x00002008L, 0x00200008L, 0x00202008L,
0x10000000L, 0x10002000L, 0x10200000L, 0x10202000L,
0x10000008L, 0x10002008L, 0x10200008L, 0x10202008L,
*/
0x10000008L, 0x10200000L, 0x00002000L, 0x10202008L,
0x10200000L, 0x00000008L, 0x10202008L, 0x00200000L,
0x10002000L, 0x00202008L, 0x00200000L, 0x10000008L,
0x00200008L, 0x10002000L, 0x10000000L, 0x00002008L,
0x00000000L, 0x00200008L, 0x10002008L, 0x00002000L, 
0x00202000L, 0x10002008L, 0x00000008L, 0x10200008L,
0x10200008L, 0x00000000L, 0x00202008L, 0x10202000L,
0x00002008L, 0x00202000L, 0x10202000L, 0x10000000L,
0x10002000L, 0x00000008L, 0x10200008L, 0x00202000L,
0x10202008L, 0x00200000L, 0x00002008L, 0x10000008L,
0x00200000L, 0x10002000L, 0x10000000L, 0x00002008L,
0x10000008L, 0x10202008L, 0x00202000L, 0x10200000L,
0x00202008L, 0x10202000L, 0x00000000L, 0x10200008L,
0x00000008L, 0x00002000L, 0x10200000L, 0x00202008L,
0x00002000L, 0x00200008L, 0x10002008L, 0x00000000L,
0x10202000L, 0x10000000L, 0x00200008L, 0x10002008L,
},{


/* s_box & P perm 6
0x00000000L, 0x02000000L, 0x00000400L, 0x02000400L,
0x00100000L, 0x02100000L, 0x00100400L, 0x02100400L,
0x00000001L, 0x02000001L, 0x00000401L, 0x02000401L,
0x00100001L, 0x02100001L, 0x00100401L, 0x02100401L,
*/
0x00100000L, 0x02100001L, 0x02000401L, 0x02000400L,
0x00000400L, 0x02000401L, 0x00100401L, 0x02100400L,
0x02100401L, 0x00100000L, 0x00000000L, 0x02000001L,
0x00000001L, 0x02000000L, 0x02100001L, 0x00000401L,
0x02000400L, 0x00100401L, 0x00100001L, 0x02000400L,
0x02000001L, 0x02100000L, 0x02100400L, 0x00100001L,
0x02100000L, 0x00000400L, 0x00000401L, 0x02100401L,
0x00100400L, 0x00000001L, 0x02000000L, 0x00100400L,
0x02000000L, 0x00100400L, 0x00100000L, 0x02000401L,
0x02000401L, 0x02100001L, 0x02100001L, 0x00000001L,
0x00100001L, 0x02000000L, 0x02000400L, 0x00100000L,
0x02100400L, 0x00000401L, 0x00100401L, 0x02100400L,
0x00000401L, 0x02000001L, 0x02100401L, 0x02100000L,
0x00100400L, 0x00000000L, 0x00000001L, 0x02100401L,
0x00000000L, 0x00100401L, 0x02100000L, 0x00000400L,
0x02000001L, 0x02000400L, 0x00000400L, 0x00100001L,
},{


/* s_box & P perm 7
0x00000000L, 0x00000800L, 0x00020000L, 0x00020800L,
0x00000020L, 0x00000820L, 0x00020020L, 0x00020820L,
0x08000000L, 0x08000800L, 0x08020000L, 0x08020800L, 
0x08000020L, 0x08000820L, 0x08020020L, 0x08020820L,
*/
0x08000820L, 0x00000800L, 0x00020000L, 0x08020820L,
0x08000000L, 0x08000820L, 0x00000020L, 0x08000000L,
0x00020020L, 0x08020000L, 0x08020820L, 0x00020800L,
0x08020800L, 0x00020820L, 0x00000800L, 0x00000020L,
0x08020000L, 0x08000020L, 0x08000800L, 0x00000820L,
0x00020800L, 0x00020020L, 0x08020020L, 0x08020800L,
0x00000820L, 0x00000000L, 0x00000000L, 0x08020020L,
0x08000020L, 0x08000800L, 0x00020820L, 0x00020000L,
0x00020820L, 0x00020000L, 0x08020800L, 0x00000800L,
0x00000020L, 0x08020020L, 0x00000800L, 0x00020820L,
0x08000800L, 0x00000020L, 0x08000020L, 0x08020000L,
0x08020020L, 0x08000000L, 0x00020000L, 0x08000820L,
0x00000000L, 0x08020820L, 0x00020020L, 0x08000020L,
0x08020000L, 0x08000800L, 0x08000820L, 0x00000000L,
0x08020820L, 0x00020800L, 0x00020800L, 0x00000820L,
0x00000820L, 0x00020020L, 0x08000000L, 0x08020800L,
} };

//子密钥  

static const unsigned long sbtrans[8][64]={
{
/* 1 2 3 4 5 6*/
0x00000000L, 0x00040000L, 0x01000000L, 0x01040000L,
0x00000400L, 0x00040400L, 0x01000400L, 0x01040400L,
0x00200000L, 0x00240000L, 0x01200000L, 0x01240000L,
0x00200400L, 0x00240400L, 0x01200400L, 0x01240400L,
0x00000001L, 0x00040001L, 0x01000001L, 0x01040001L,
0x00000401L, 0x00040401L, 0x01000401L, 0x01040401L,
0x00200000L, 0x00240001L, 0x01200001L, 0x01240001L,
0x00200401L, 0x00240401L, 0x01200401L, 0x01240401L,
0x02000000L, 0x02040000L, 0x03000000L, 0x03040000L,
0x02000400L, 0x02040400L, 0x03000400L, 0x03040400L,
0x02200000L, 0x02240000L, 0x03200000L, 0x03240000L,
0x02200400L, 0x02240400L, 0x03200400L, 0x03240400L,
0x02000001L, 0x02040001L, 0x03000001L, 0x03040001L,
0x02000401L, 0x02040401L, 0x03000401L, 0x03040401L,
0x02200001L, 0x02240001L, 0x03200001L, 0x03240001L, 
0x02200401L, 0x02240401L, 0x03200401L, 0x03240401L,
},{
/* 7 8 10 11 12 13 */
0x00000000L, 0x00000002L, 0x00000800L, 0x00000802L,
0x08000000L, 0x08000002L, 0x08000800L, 0x08000802L,
0x00010000L, 0x00010002L, 0x00010800L, 0x00010802L,
0x08010000L, 0x08010002L, 0x08010800L, 0x08010802L,
0x00000100L, 0x00000102L, 0x00000900L, 0x00000902L, 
0x08000100L, 0x08000102L, 0x08000900L, 0x08000902L,
0x00010100L, 0x00010102L, 0x00010900L, 0x00010902L,
0x08010100L, 0x08010102L, 0x08010900L, 0x08010902L,
0x00000010L, 0x00000012L, 0x00000810L, 0x00000812L,
0x08000010L, 0x08000012L, 0x08000810L, 0x08000812L,
0x00010010L, 0x00010012L, 0x00010810L, 0x00010812L,
0x08010010L, 0x08010012L, 0x08010810L, 0x08010812L,
0x00000110L, 0x00000112L, 0x00000910L, 0x00000912L,
0x08000110L, 0x08000112L, 0x08000910L, 0x08000912L,
0x00010110L, 0x00010112L, 0x00010910L, 0x00010912L,
0x08010110L, 0x08010112L, 0x08010910L, 0x08010912L,
},{
/* 14 15 16 17 19 20 */
0x00000000L, 0x00000004L, 0x00001000L, 0x00001004L,
0x10000000L, 0x10000004L, 0x10001000L, 0x10001004L,
0x00000020L, 0x00000024L, 0x00001020L, 0x00001024L,
0x10000020L, 0x10000024L, 0x10001020L, 0x10001024L,
0x00080000L, 0x00080004L, 0x00081000L, 0x00081004L,
0x10080000L, 0x10080004L, 0x10081000L, 0x10081004L,
0x00080020L, 0x00080024L, 0x00081020L, 0x00081024L, 
0x10080020L, 0x10080024L, 0x10081020L, 0x10081024L,
0x20000000L, 0x20000004L, 0x20001000L, 0x20001004L,
0x30000000L, 0x30000004L, 0x30001000L, 0x30001004L,
0x20000020L, 0x20000024L, 0x20001020L, 0x20001024L,
0x30000020L, 0x30000024L, 0x30001020L, 0x30001024L,
0x20080000L, 0x20080004L, 0x20081000L, 0x20081004L,
0x30080000L, 0x30080004L, 0x30081000L, 0x30081004L,
0x20080020L, 0x20080024L, 0x20081020L, 0x20081024L,
0x30080020L, 0x30080024L, 0x30081020L, 0x30081024L,
},{
/* 21 23 24 26 27 28 */
0x00000000L, 0x00100000L, 0x00000008L, 0x00100008L,
0x00000200L, 0x00100200L, 0x00000208L, 0x00100208L,
0x04000000L, 0x04100000L, 0x04000008L, 0x04100008L,
0x04000200L, 0x04100200L, 0x04000208L, 0x04100208L,
0x00002000L, 0x00102000L, 0x00002008L, 0x00102008L,
0x00002200L, 0x00102200L, 0x00002208L, 0x00102208L,
0x04002000L, 0x04102000L, 0x04002008L, 0x04102008L,
0x04002200L, 0x04102200L, 0x04002208L, 0x04102208L,
0x00020000L, 0x00120000L, 0x00020008L, 0x00120008L,
0x00020200L, 0x00120200L, 0x00020208L, 0x00120208L,
0x04020000L, 0x04120000L, 0x04020008L, 0x04120008L,
0x04020200L, 0x04120200L, 0x04020208L, 0x04120208L,
0x00022000L, 0x00122000L, 0x00022008L, 0x00122008L,
0x00022200L, 0x00122200L, 0x00022208L, 0x00122208L,
0x04022000L, 0x04122000L, 0x04022008L, 0x04122008L,
0x04022200L, 0x04122200L, 0x04022208L, 0x04122208L,
},{
/* 29 30 31 32 33 34 */
0x00000000L, 0x00000200L, 0x00020000L, 0x00020200L,
0x00000001L, 0x00000020L, 0x00020001L, 0x00020201L,
0x08000001L, 0x08000200L, 0x08020000L, 0x08020200L, 
0x08000001L, 0x08000201L, 0x08020001L, 0x08020201L,
0x00200000L, 0x00200200L, 0x00220000L, 0x00220200L,
0x00200001L, 0x00200201L, 0x00220001L, 0x00220201L,
0x08200000L, 0x08200200L, 0x08220000L, 0x08220200L,
0x08200001L, 0x08200201L, 0x08220001L, 0x08220201L,
0x00000002L, 0x00000202L, 0x00020002L, 0x00020202L,
0x00000003L, 0x00000203L, 0x00020003L, 0x00020203L,
0x08000002L, 0x08000202L, 0x08020002L, 0x08020202L,
0x08000003L, 0x08000203L, 0x08020003L, 0x08020203L,
0x00200002L, 0x00200202L, 0x00220002L, 0x00220202L,
0x00200003L, 0x00200203L, 0x00220003L, 0x00220203L,
0x08200002L, 0x08200202L, 0x08220002L, 0x08220202L,
0x08200003L, 0x08200203L, 0x08220003L, 0x08220203L,
},{
/* 36 37 39 40 41 42 */
0x00000000L, 0x00000010L, 0x20000000L, 0x20000010L,
0x00100000L, 0x00100010L, 0x20100000L, 0x20100010L, 
0x00000800L, 0x00000810L, 0x20000800L, 0x20000810L,
0x00100800L, 0x00100810L, 0x20100800L, 0x20100810L,
0x04000000L, 0x04000010L, 0x24000000L, 0x24000010L, 
0x04100000L, 0x04100010L, 0x24100000L, 0x24100010L,
0x04000800L, 0x04000810L, 0x24000800L, 0x24000810L,
0x04100800L, 0x04100810L, 0x24100800L, 0x24100810L, 
0x00000004L, 0x00000014L, 0x20000004L, 0x20000014L,
0x00100004L, 0x00100014L, 0x20100004L, 0x20100014L,
0x00000804L, 0x00000814L, 0x20000804L, 0x20000814L, 
0x00100804L, 0x00100814L, 0x20100804L, 0x20100814L,
0x04000004L, 0x04000014L, 0x24000004L, 0x24000014L, 
0x04100004L, 0x04100014L, 0x24100004L, 0x24100014L,
0x04000804L, 0x04000814L, 0x24000804L, 0x24000814L,
0x04100804L, 0x04100814L, 0x24100804L, 0x24100814L,
},{
/* 44 45 46 47 48 49 */
0x00000000L, 0x00001000L, 0x00010000L, 0x00011000L,
0x02000000L, 0x02001000L, 0x02010000L, 0x02011000L,
0x00000020L, 0x00001020L, 0x00010020L, 0x00011020L, 
0x02000020L, 0x02001020L, 0x02010020L, 0x02011020L,
0x00040000L, 0x00041000L, 0x00050000L, 0x00051000L, 
0x02040000L, 0x02041000L, 0x02050000L, 0x02051000L,
0x00040020L, 0x00041020L, 0x00050020L, 0x00051020L, 
0x02040020L, 0x02041020L, 0x02040020L, 0x02051020L,
0x00002000L, 0x00003000L, 0x00012000L, 0x00013000L,
0x02002000L, 0x02003000L, 0x02012000L, 0x02013000L,
0x00002020L, 0x00003020L, 0x00012020L, 0x00013020L,
0x02002020L, 0x02003020L, 0x02012020L, 0x02013020L,
0x00042000L, 0x00043000L, 0x00052000L, 0x00053000L, 
0x02042000L, 0x02043000L, 0x02052000L, 0x02053000L,
0x00042020L, 0x00043020L, 0x00052020L, 0x00053020L,
0x02042020L, 0x02043020L, 0x02052020L, 0x02053020L,
},{
/* 50 51 52 53 55 56 */
0x00000000L, 0x00000400L, 0x01000000L, 0x01000400L,
0x00000100L, 0x00000500L, 0x01000100L, 0x01000500L,
0x10000000L, 0x10000400L, 0x11000000L, 0x11000400L,
0x10000100L, 0x10000500L, 0x11000100L, 0x11000500L,
0x00080000L, 0x00080400L, 0x01080000L, 0x01080400L,
0x00080100L, 0x00080500L, 0x01080100L, 0x01080500L,
0x10080000L, 0x10080400L, 0x11080000L, 0x11080400L,
0x10080100L, 0x10080500L, 0x11080100L, 0x11080500L,
0x00000008L, 0x00000408L, 0x01000008L, 0x01000408L,
0x00000108L, 0x00000508L, 0x01000108L, 0x01000508L,
0x10000008L, 0x10000408L, 0x11000008L, 0x11000408L,
0x10000108L, 0x10000508L, 0x11000108L, 0x11000508L,
0x00080008L, 0x00080408L, 0x01080008L, 0x01080408L,
0x00080108L, 0x00080508L, 0x01080108L, 0x01080508L,
0x10080008L, 0x10080408L, 0x11080008L, 0x11080408L,
0x10080108L, 0x10080408L, 0x11080108L, 0x11080508L,
}};

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CDes::CDes()
{

}

CDes::~CDes()
{

}
/*-----------------------------------------------------------------
//
//       data_in-- INPUT,data to be crypted
//      data_out--OUTPUT,data after process
//      ks     -- INPUT,key schedule
//       1:  ENCRYPT  0: DECRYPT
-----------------------------------------------------------------*/
void CDes::DesCrypte(unsigned char * data_in,unsigned char * data_out, int encrypt_flag)
{
	register unsigned long l,r,temp1,temp2;
	register int i;
	register unsigned long * reg_ks;
	
	
	
	c2l(data_in,l);
	c2l(data_in,r);
	
	
	/*
	**     初始化，改变序列顺序
	*/
	IP(l,r);
	
	//////////////清空
	l&=0xffffffffL;
	r&=0xffffffffL;
	
	
	reg_ks=(unsigned long *)m_keys;
	
	
	/*
	** 加密
	*/
	if(encrypt_flag)
	{
		for(i=0;i<32;i+=4)
		{ 
            ENCRYPT_R(l,r,temp1,temp2,reg_ks,i+0);
			ENCRYPT_R(r,l,temp1,temp2,reg_ks,i+2);
		}
	}
	else
	/*
	** 解密
	*/
	{
		for(i=30;i>0;i-=4)
		{
            ENCRYPT_R(l,r,temp1,temp2,reg_ks,i-0);
            ENCRYPT_R(r,l,temp1,temp2,reg_ks,i-2);
		}
	}
	
	
	//////////////////////清空
	
	l&=0xffffffffL;
	r&=0xffffffffL;
	   
   /*
	   ** FP 改变序列顺序
   */
    FP(r,l);
    l2c(r,data_out);
	l2c(l,data_out);
}
/*------------------------------------------------------------------
//    Function:     set_key
//    key    --   INPUT , 64位deskey
//    ks     --   OUTPUT,指向  subkeys  table
-------------------------------------------------------------------*/
int CDes::set_key(unsigned char * key)
{
	register unsigned long c,d,temp,temp1,temp2;
	register unsigned char * in;
	register unsigned long * reg_ks;
	register int i;

	reg_ks=(unsigned long * ) m_keys;
	in=key;

/*
    **  首先,把key转换成两个32为长的无符号长整数.
*/
	c2l(in,c);
	c2l(in,d);

/*
    **  初始化key ,得到 56bits key (in c,d)
*/
	OP_TWO(c,d,temp,4,0x0f0f0f0fL);
	OP_ONE(c,temp,18,0xcccc0000L);
	OP_ONE(d,temp,18,0xcccc0000L);
	OP_ONE(c,temp,9,0xAA00AA00L);
	OP_ONE(d,temp,9,0xAA00AA00L);
temp1=((d&0x000000ffL)<<24)
      |((d&0x0000ff00L)<<8)
	  |((d&0x00ff0000L)>>8)
	                     |((d&0xff000000L)>>24);
         temp2=c;
		 c=temp1>>4;
		 d=((temp2&0x00ffffff)<<4)|(temp1&0x0000000f);

/*
**   get the 16 轮subkeys  
*/
		 for(i=0;i<ROUNDS;i++)
		 {
			 if(left_shift[i])
			 {
				 c=((c<<2)|(c>>26));
				 d=((d<<2)|(d>>26));
			 }
			 else
			 {
				 c=((c<<1)|(c>>27));
				 d=((d<<1)|(d>>27));
			 }
			 c&=0x0fffffffL;
			 d&=0x0fffffffL;
			 
			 temp1=sbtrans[0][(c>>22L)&0x3f]|
				 
				 sbtrans[1][((c>>16L)&0x30)|((c>>15L)&0x0f)]|
				 sbtrans[2][((c>>9L)&0x3c)|((c>>8L)&0x3)]|
				 sbtrans[3][((c>>2L)&0x20)|((c>>1)&0x18)|((c)&0x7)];
			 
			 
			 temp2=sbtrans[4][(d>>22L)&0x3f]|
				 sbtrans[5][((d>>15L)&0x30)|((d>>14L)&0x0f)]|
				 sbtrans[6][(d>>7L)&0x3f]|
				 sbtrans[7][((d>>1L)&0x3c)|((d)&0x3)];
			 
			 *(reg_ks++)=(temp1&0xff000000L)|((temp1&0x0000ff00L)<<8)
				 |((temp2&0xff000000L)>>16)|((temp2&0x0000ff00L)>>8);
			 *(reg_ks++)=((temp1&0x00ff0000L)<<8)|((temp1&0x000000ffL)<<16)
				 |((temp2&0x00ff0000L)>>8)|(temp2&0x000000ffL);
			 
		 }
		 
		 return(0);
}
void CDes::SetKey(CString strPass)
{
	int passlen=strPass.GetLength();
	int i;
	char the_key[128];
	
	for(i=0;i<passlen;i++)
	{
		the_key[i]=strPass.GetAt(i); 
	}
    the_key[i]='\0';
	set_key((unsigned char *)the_key);
	
}
/////////////////////////////////////////////////////////////////////
//文件加密过程
void CDes::EnCrypteFile(CString password,CString ming,CString mi)
{
	CFile fming,fmi;
	int mingout,minglen;
	char d_in[128];
	char d_out[128];

	/* set keys*/
    SetKey(password);

    //计算明文长度
    
	fming.Open(LPCTSTR(ming),CFile::modeRead);
	
	int j;
	minglen=fming.GetLength();
	if(minglen%8==0)
		j=minglen/8;
	else
		j=minglen/8+1;

	mingout=minglen%8;
	
	fming.Close();

	fming.Open(LPCTSTR(ming),CFile::modeRead);

	if(!fmi.Open(LPCTSTR(mi),CFile::modeCreate))
		AfxMessageBox("文件打开出错",MB_OK);
	fmi.Close();
	fmi.Open(LPCTSTR(mi),CFile::modeWrite);


	for (int i=1;i<=j;i++)
	{

		fming.Read(d_in,8);
		if (i==j)
		{
			for(int k=1;k<=8-mingout && mingout!=0;k++)
			{
				d_in[mingout+k-1]=' ';
			}
		}
	    DesCrypte((unsigned char *)d_in,(unsigned char *)d_out,1);

		fmi.Write(d_out,8);
	}

	fming.Close();

	fmi.Close();

}
CString CDes::DesCrypteString(CString strPass,CString str,int nFlag)
{
	CString strResult;
	int minglen,mingout;
	char d_in[128];
	char d_out[128];
	
	//set keys
	SetKey(strPass);
	//计算明文长度
    
	int i,j;
    //Encrypte the str
	if(nFlag)
	{		
		minglen=str.GetLength();
		if(minglen%8==0)
			j=minglen/8;
		else
			j=minglen/8+1;
		
		mingout=minglen%8;
		strResult="";

		for (int i=1;i<=j;i++)
		{	
			for(int m=0;m<8 && ((i-1)*8+m)<minglen;m++)
				d_in[m]=str.GetAt((i-1)*8+m);
			
			if (i==j)
			{
				for(int k=1;k<=8-mingout && mingout!=0;k++)
				{
					d_in[mingout+k-1]=' ';
				}
			}			
			DesCrypte((unsigned char *)d_in,(unsigned char *)d_out,1);
			CString strTemp;
			for(int t=0;t<8;t++)
			{
				strTemp.Format("%02X",(unsigned char)d_out[t]);
				strResult+=strTemp;
			}
				
			TRACE("The string is %s length is %d\n",strResult,strResult.GetLength());
		}
	}
	//Decrypte the str
	else
	{
		str.MakeUpper();
		minglen=str.GetLength();
	    j=minglen/16;
		strResult="";
        char ch;
		unsigned char uch;
		
		for(i=1;i<=j;i++)
		{
			for(int m=0;m<8;m++)
			{
				ch=str.GetAt(16*(i-1)+2*m);
				if (ch>='A')
					ch=ch-'A'+10;
				else
					ch=ch-'0';
				uch=ch;
				ch=str.GetAt(16*(i-1)+2*m+1);
				if (ch>='A')
					ch=ch-'A'+10;
				else
					ch=ch-'0';
				uch=(BYTE)uch*16+ch;

				d_in[m]=uch;
			}
			
//			for(int m=0;m<8;m++)
//				d_in[m]=str.GetAt((i-1)*8+m);

			DesCrypte((unsigned char *)d_in,(unsigned char *)d_out,0);
			for(int t=0;t<8;t++)
				strResult.Insert(strResult.GetLength(),d_out[t]);
			TRACE("The string is %s length is %d\n",strResult,strResult.GetLength());
		}	
		strResult.TrimRight();
	}
	
	return strResult;
}

//文件解密过程
void CDes::DeCrypteFile(CString password,CString mi,CString ming)
{
	CFile fmi,fming;
	int milen;
	char d_in[128];
	char d_out[128];

	/* set keys*/
    SetKey(password);

	CFile FileMi(LPCTSTR(mi),CFile::modeRead);
	milen=FileMi.GetLength();
	FileMi.Close();
	int j=milen/8;

	fmi.Open(LPCTSTR(mi),CFile::modeRead);

	if(!fming.Open(LPCTSTR(ming),CFile::modeCreate))
	{
		AfxMessageBox("文件打开出错",MB_OK);
	}
	fming.Close();
	fming.Open(LPCTSTR(ming),CFile::modeWrite);
	int i;
	for(i=1;i<=j;i++)
    {

		fmi.Read(d_in,8);
	    DesCrypte((unsigned char *)d_in,(unsigned char *)d_out,0);

		fming.Write(d_out,8);
	}

	fmi.Close();

	fming.Close();

}